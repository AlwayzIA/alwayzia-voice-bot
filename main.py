import os
import time
import requests
import logging
import uuid
import json
from flask import Flask, request, jsonify
from twilio.twiml.voice_response import VoiceResponse
from deepgram import DeepgramClient, PrerecordedOptions, FileSource
import openai
from dotenv import load_dotenv
import gspread
from google.oauth2.service_account import Credentials

# Configuration de base
logging.basicConfig(level=logging.INFO)
load_dotenv()

# Cl√©s API et variables d'environnement
TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
DEEPGRAM_API_KEY = os.getenv("DEEPGRAM_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ELEVENLABS_API_KEY = os.getenv("ELEVENLABS_API_KEY")
GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS_JSON")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
PORT = int(os.getenv("PORT", 8080))

# Initialisation des clients externes
deepgram = DeepgramClient(DEEPGRAM_API_KEY)

# Configuration OpenAI (ancienne syntaxe stable)
openai.api_key = OPENAI_API_KEY

# Initialisation de Flask
app = Flask(__name__)

def get_hotel_config(twilio_number):
    """R√©cup√®re la configuration de l'h√¥tel depuis Google Sheets selon le num√©ro Twilio appel√©"""
    try:
        if not GOOGLE_CREDENTIALS_JSON:
            logging.warning("‚ö†Ô∏è Google Credentials manquantes, utilisation config par d√©faut")
            return get_default_hotel_config()
        
        # Connexion √† Google Sheets
        credentials_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
        credentials = Credentials.from_service_account_info(credentials_dict)
        gc = gspread.authorize(credentials)
        
        # Ouverture du tableur principal
        sheet = gc.open_by_key(GOOGLE_SHEET_ID).sheet1
        
        # Recherche de l'h√¥tel par num√©ro Twilio
        records = sheet.get_all_records()
        
        for record in records:
            if record.get('numero_twilio') == twilio_number:
                logging.info(f"‚úÖ Configuration trouv√©e pour {record.get('nom_hotel', 'H√¥tel')}")
                return record
        
        logging.warning(f"‚ö†Ô∏è Aucune config trouv√©e pour {twilio_number}, utilisation par d√©faut")
        return get_default_hotel_config()
        
    except Exception as e:
        logging.error(f"‚ùå Erreur Google Sheets: {str(e)}")
        return get_default_hotel_config()

def get_default_hotel_config():
    """Configuration par d√©faut pour les tests (H√¥tel Beau-Rivage)"""
    return {
        'nom_hotel': 'H√¥tel Beau-Rivage',
        'pays': 'Suisse',
        'langue_principale': 'fran√ßais',
        'formule': 'Pro',
        'voix_genre': 'femme',
        'voix_prenom': '√âlise',
        'ton_vocal': 'formel',
        'horaires_reception': '08h00 √† 18h00',
        'check_in': '14h00',
        'check_out': '12h00',
        'petit_dejeuner': '07h30 √† 10h30',
        'transfert_humain': True,
        'email_contact': 'alwayzia.ops@gmail.com',
        'numero_twilio': '+41 21 539 18 06',
        'services': ['WiFi gratuit', 'Parking', 'Vue lac'],
        'chambres_types': ['Standard', 'Sup√©rieure', 'Suite'],
        'recommandations_locales': True
    }

@app.route("/", methods=["GET"])
def home():
    """Page d'accueil pour v√©rifier que l'API fonctionne"""
    return jsonify({
        "status": "‚úÖ Neo - Agent IA T√©l√©phonique AlwayzIA - En ligne",
        "version": "2.0.0",
        "agent": "Neo",
        "company": "AlwayzIA",
        "services": {
            "transcription": "Deepgram",
            "ai": "OpenAI GPT-4",
            "voice": "ElevenLabs",
            "telephony": "Twilio"
        },
        "endpoints": [
            "/voice - Webhook Twilio pour appels entrants",
            "/process_recording - Traitement des enregistrements",
            "/status - Statut de l'API",
            "/test - Test de configuration"
        ]
    })

@app.route("/status", methods=["GET"])
def status():
    """Endpoint de statut pour le monitoring"""
    return jsonify({
        "status": "healthy",
        "agent": "Neo",
        "company": "AlwayzIA",
        "service": "Agent IA T√©l√©phonique",
        "timestamp": str(uuid.uuid4()),
        "apis_configured": {
            "twilio": bool(TWILIO_ACCOUNT_SID and TWILIO_AUTH_TOKEN),
            "openai": bool(OPENAI_API_KEY),
            "elevenlabs": bool(ELEVENLABS_API_KEY),
            "deepgram": bool(DEEPGRAM_API_KEY)
        }
    })

@app.route("/voice", methods=["POST"])
def voice():
    """Webhook principal pour recevoir les appels Twilio"""
    try:
        logging.info("üìû Nouvel appel re√ßu sur le webhook Neo")
        
        # R√©cup√©ration des informations de l'appel
        caller_number = request.form.get("From", "Num√©ro inconnu")
        called_number = request.form.get("To", "Num√©ro inconnu")
        call_sid = request.form.get("CallSid", "SID inconnu")
        
        logging.info(f"üî¢ De: {caller_number} | Vers: {called_number}")
        logging.info(f"üÜî Call SID: {call_sid}")
        
        # R√©cup√©ration de la configuration de l'h√¥tel
        hotel_config = get_hotel_config(called_number)
        
        logging.info(f"üè® H√¥tel d√©tect√©: {hotel_config['nom_hotel']}")
        logging.info(f"üé≠ Voix: {hotel_config['voix_prenom']} ({hotel_config['voix_genre']})")
        
        # Cr√©ation de la r√©ponse TwiML
        response = VoiceResponse()
        
        # Message d'accueil dynamique selon la config de l'h√¥tel
        import datetime
        current_hour = datetime.datetime.now().hour
        
        if 6 <= current_hour <= 17:
            welcome_message = f"Bonjour et bienvenue au {hotel_config['nom_hotel']}. {hotel_config['voix_prenom']} √† votre service, que puis-je faire pour vous aujourd'hui ?"
        else:
            welcome_message = f"Bonsoir et bienvenue au {hotel_config['nom_hotel']}. {hotel_config['voix_prenom']} √† votre service, que puis-je faire pour vous ce soir ?"
        
        # Message d'accueil avec Twilio TTS
        response.say(welcome_message, language="fr-FR", voice="Polly.Celine")
        
        # Enregistrement du message
        response.record(
            max_length=60,  # 1 minute max
            finish_on_key="#",
            play_beep=True,
            timeout=5,
            transcribe=False,
            action="/process_recording",
            method="POST"
        )
        
        # Message de fallback si pas d'enregistrement
        fallback_msg = "Je n'ai pas re√ßu votre message. Merci de rappeler ou d'appuyer sur di√®se pour terminer votre appel."
        response.say(fallback_msg, language="fr-FR", voice="Polly.Celine")
        
        logging.info("‚úÖ R√©ponse TwiML g√©n√©r√©e - Neo")
        return str(response)
        
    except Exception as e:
        logging.error(f"üö® ERREUR dans voice webhook: {str(e)}")
        response = VoiceResponse()
        response.say(
            "D√©sol√©, une erreur technique s'est produite. Veuillez rappeler plus tard.",
            language="fr-FR",
            voice="Polly.Celine"
        )
        return str(response)

@app.route("/process_recording", methods=["POST"])
def process_recording():
    """R√©cup√®re l'enregistrement, le transcrit avec Deepgram, puis le traite avec OpenAI"""
    try:
        logging.info("üîî Neo traite l'enregistrement en cours...")
        
        # R√©cup√©ration de l'URL d'enregistrement
        recording_url = request.form.get("RecordingUrl")
        recording_sid = request.form.get("RecordingSid", "SID inconnu")
        call_sid = request.form.get("CallSid", "SID inconnu")
        caller_number = request.form.get("From", "Num√©ro inconnu")
        called_number = request.form.get("To", "Num√©ro inconnu")
        
        logging.info(f"üéß URL d'enregistrement: {recording_url}")
        logging.info(f"üÜî Recording SID: {recording_sid}")
        logging.info(f"üìû Appelant: {caller_number}")
        
        if not recording_url:
            logging.error("‚ùå Aucune URL d'enregistrement fournie")
            response = VoiceResponse()
            response.say(
                "D√©sol√©, je n'ai pas pu r√©cup√©rer votre enregistrement.",
                language="fr-FR",
                voice="Polly.Celine"
            )
            return str(response)
        
        # R√©cup√©ration de la configuration de l'h√¥tel
        hotel_config = get_hotel_config(called_number)
        logging.info(f"üè® Traitement pour: {hotel_config['nom_hotel']}")
        
        # Construction de l'URL correcte pour t√©l√©charger l'audio
        # Twilio donne l'URL de m√©tadonn√©es, il faut construire l'URL du fichier WAV
        if recording_url.endswith('.json'):
            # Si l'URL se termine par .json, remplacer par .wav
            wav_url = recording_url.replace('.json', '.wav')
        else:
            # Sinon, ajouter .wav √† la fin
            wav_url = f"{recording_url}.wav"
        
        logging.info(f"üéØ URL audio √† transcrire: {wav_url}")
        
        # Transcription avec Deepgram (avec t√©l√©chargement et auth Twilio)
        logging.info("üé§ Neo transcrit avec Deepgram...")
        transcript = transcribe_with_deepgram(wav_url)
        
        if not transcript:
            logging.error("‚ùå √âchec de la transcription")
            response = VoiceResponse()
            response.say(
                "D√©sol√©, je n'ai pas pu comprendre votre message. Pouvez-vous rappeler ?",
                language="fr-FR",
                voice="Polly.Celine"
            )
            return str(response)
        
        logging.info(f"üìù Transcription Neo: {transcript}")
        
        # G√©n√©ration de r√©ponse avec GPT-4
        logging.info("ü§ñ Neo g√©n√®re une r√©ponse avec GPT-4...")
        ai_response = generate_gpt4_response(transcript, caller_number, hotel_config)
        
        logging.info(f"üí≠ R√©ponse Neo: {ai_response}")
        
        # Cr√©ation de la r√©ponse TwiML
        response = VoiceResponse()
        response.say(ai_response, language="fr-FR", voice="Polly.Celine")
        
        # Message de fin personnalis√© selon l'h√¥tel
        end_message = f"Merci infiniment pour votre appel. Toute l'√©quipe du {hotel_config['nom_hotel']} reste √† votre disposition. Tr√®s belle journ√©e √† vous !"
        response.say(end_message, language="fr-FR", voice="Polly.Celine")
        
        logging.info("‚úÖ Neo a termin√© le traitement avec succ√®s")
        return str(response)
        
    except Exception as e:
        logging.error(f"üö® ERREUR dans process_recording Neo: {str(e)}")
        response = VoiceResponse()
        response.say(
            "D√©sol√©, une erreur s'est produite lors du traitement de votre message.",
            language="fr-FR",
            voice="Polly.Celine"
        )
        return str(response)

def transcribe_with_deepgram(wav_url):
    """Transcrit l'audio avec Deepgram depuis une URL avec authentification Twilio"""
    try:
        # Attendre quelques secondes que l'enregistrement soit disponible
        import time
        time.sleep(3)
        
        # T√©l√©chargement du fichier audio avec authentification Twilio
        logging.info(f"üîó T√©l√©chargement depuis: {wav_url}")
        
        response = requests.get(
            wav_url,
            auth=(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN),
            timeout=30
        )
        
        logging.info(f"üì° Status t√©l√©chargement: {response.status_code}")
        
        if response.status_code != 200:
            logging.error(f"‚ùå Erreur t√©l√©chargement: {response.status_code}")
            logging.error(f"‚ùå Contenu r√©ponse: {response.text[:200]}")
            return None
        
        audio_data = response.content
        logging.info(f"‚úÖ Audio t√©l√©charg√©: {len(audio_data)} bytes")
        
        # V√©rification que nous avons bien des donn√©es audio
        if len(audio_data) < 1000:  # Fichier audio trop petit
            logging.error(f"‚ùå Fichier audio trop petit: {len(audio_data)} bytes")
            return None
        
        # Configuration pour la transcription en fran√ßais avec format Twilio
        options = PrerecordedOptions(
            model="nova-2",
            language="fr",
            smart_format=True,
            punctuate=True,
            paragraphs=True,
            utterances=True,
            encoding="mulaw",  # Important: Twilio utilise mulaw
            sample_rate=8000   # Important: Twilio utilise 8000Hz
        )
        
        # Transcription avec les donn√©es audio t√©l√©charg√©es (format mulaw)
        source: FileSource = {"buffer": audio_data, "mimetype": "audio/mulaw"}
        
        response = deepgram.listen.prerecorded.v("1").transcribe_file(source, options)
        
        # Extraction du texte
        transcript = response["results"]["channels"][0]["alternatives"][0]["transcript"]
        
        if transcript and transcript.strip():
            logging.info(f"‚úÖ Transcription r√©ussie: {transcript}")
            return transcript.strip()
        else:
            logging.warning("‚ö†Ô∏è Transcription vide")
            return None
            
    except Exception as e:
        logging.error(f"‚ùå Erreur Deepgram: {str(e)}")
        return None

def generate_gpt4_response(transcript, caller_number="", hotel_config=None):
    """G√©n√®re une r√©ponse intelligente avec GPT-4 selon la config de l'h√¥tel"""
    try:
        if not hotel_config:
            hotel_config = get_default_hotel_config()
        
        # V√©rification de la cl√© OpenAI
        if not OPENAI_API_KEY:
            logging.warning("‚ö†Ô∏è OpenAI API key manquante, utilisation de r√©ponse par d√©faut")
            return f"Merci pour votre message. Notre √©quipe du {hotel_config['nom_hotel']} a bien pris note de votre demande et vous rappellera dans les plus brefs d√©lais."
        
        # Construction du prompt syst√®me personnalis√© pour cet h√¥tel
        services_list = ", ".join(hotel_config.get('services', []))
        chambres_list = ", ".join(hotel_config.get('chambres_types', []))
        
        system_prompt = f"""Tu es un assistant t√©l√©phonique intelligent pour le {hotel_config['nom_hotel']} en {hotel_config['pays']}.

INFORMATIONS DE L'√âTABLISSEMENT :
- Nom : {hotel_config['nom_hotel']}
- Horaires r√©ception : {hotel_config['horaires_reception']}
- Check-in : {hotel_config['check_in']}
- Check-out : {hotel_config['check_out']}
- Petit-d√©jeuner : {hotel_config['petit_dejeuner']}
- Services disponibles : {services_list}
- Types de chambres : {chambres_list}
- Ton √† adopter : {hotel_config['ton_vocal']}
- Voix IA : {hotel_config['voix_prenom']}

R√àGLES CRITIQUES :
- Tu ne communiques QUE les informations list√©es ci-dessus
- Tu ne confirmes JAMAIS une r√©servation
- Tu collectes : nom, pr√©nom, t√©l√©phone, email, demande, moyen de recontact
- Tu vouvoies TOUJOURS le client
- Ton {hotel_config['ton_vocal']} et professionnel

GESTION DES INFORMATIONS MANQUANTES :
Si une information n'est pas disponible :
"Je suis d√©sol√©, je n'ai malheureusement pas cette information. Souhaitez-vous que je transmette votre demande √† la r√©ception afin qu'un membre de l'√©quipe vous rappelle ou vous contacte par email avec la r√©ponse exacte ?"

STYLE :
- R√©ponses concises (2-3 phrases max)
- Patience et bienveillance
- Repr√©sente l'excellence du {hotel_config['nom_hotel']}

Tu travailles pour le {hotel_config['nom_hotel']} et tu incarnes leurs valeurs."""
        
        # Appel √† l'API OpenAI GPT-4 (ancienne syntaxe)
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"Message de l'appelant : {transcript}"}
            ],
            max_tokens=150,
            temperature=0.7
        )
        
        ai_response = response.choices[0].message.content.strip()
        
        if ai_response:
            return ai_response
        else:
            return f"Merci pour votre message. Notre √©quipe du {hotel_config['nom_hotel']} a bien pris note de votre demande et vous rappellera dans les plus brefs d√©lais."
            
    except Exception as e:
        logging.error(f"‚ùå Erreur GPT-4: {str(e)}")
        hotel_name = hotel_config['nom_hotel'] if hotel_config else "notre √©tablissement"
        return f"Merci pour votre appel. L'√©quipe de {hotel_name} a bien re√ßu votre message et vous rappellera dans les plus brefs d√©lais."

def generate_elevenlabs_audio(text, hotel_config=None):
    """G√©n√®re l'audio avec ElevenLabs selon la config de l'h√¥tel"""
    try:
        if not hotel_config:
            hotel_config = get_default_hotel_config()
        
        # Mapping des voix selon la configuration de l'h√¥tel
        voice_mapping = {
            ('fran√ßais', 'femme'): 'g5CIjZEefAph4nQFvHAz',  # Alice - √âlise
            ('fran√ßais', 'homme'): 'flq6f7yk4E4fJM5XTYuZ',  # Antoine - Nolan  
            ('anglais', 'femme'): '21m00Tcm4TlvDq8ikWAM',   # Rachel - Lauren
            ('anglais', 'homme'): 'VR6AewLTigWG4xSOukaG',   # Arnold - Ethan
        }
        
        # S√©lection de la voix selon la config de l'h√¥tel
        langue = hotel_config.get('langue_principale', 'fran√ßais').lower()
        genre = hotel_config.get('voix_genre', 'femme').lower()
        voice_id = voice_mapping.get((langue, genre), 'g5CIjZEefAph4nQFvHAz')
        
        logging.info(f"üé§ Voix s√©lectionn√©e: {langue}/{genre} pour {hotel_config['voix_prenom']}")
        
        url = f"https://api.elevenlabs.io/v1/text-to-speech/{voice_id}"
        
        headers = {
            "Accept": "audio/mpeg",
            "Content-Type": "application/json",
            "xi-api-key": ELEVENLABS_API_KEY
        }
        
        data = {
            "text": text,
            "model_id": "eleven_flash_v2_5",  # Mod√®le multilingue 32 langues
            "voice_settings": {
                "stability": 0.5,
                "similarity_boost": 0.75,
                "style": 0.5,
                "use_speaker_boost": True
            }
        }
        
        response = requests.post(url, json=data, headers=headers, timeout=30)
        
        if response.status_code == 200:
            # Sauvegarde temporaire du fichier audio
            filename = f"/tmp/{hotel_config['voix_prenom'].lower()}_audio_{uuid.uuid4()}.mp3"
            with open(filename, "wb") as f:
                f.write(response.content)
            
            logging.info(f"‚úÖ Audio {hotel_config['voix_prenom']} (Neo) ElevenLabs g√©n√©r√©: {filename}")
            
            # TODO: Upload vers un service de stockage public pour retourner l'URL
            # Pour l'instant, retourne None pour utiliser le fallback Twilio
            return None
            
        else:
            logging.error(f"‚ùå Erreur ElevenLabs: {response.status_code}")
            return None
            
    except Exception as e:
        logging.error(f"‚ùå Erreur dans generate_elevenlabs_audio: {str(e)}")
        return None

@app.route("/test", methods=["GET"])
def test():
    """Endpoint de test pour v√©rifier la configuration"""
    config_status = {
        "twilio_sid": "‚úÖ Configur√©" if TWILIO_ACCOUNT_SID else "‚ùå Manquant",
        "twilio_token": "‚úÖ Configur√©" if TWILIO_AUTH_TOKEN else "‚ùå Manquant", 
        "openai_key": "‚úÖ Configur√©" if OPENAI_API_KEY else "‚ùå Manquant",
        "elevenlabs_key": "‚úÖ Configur√©" if ELEVENLABS_API_KEY else "‚ùå Manquant",
        "deepgram_key": "‚úÖ Configur√©" if DEEPGRAM_API_KEY else "‚ùå Manquant"
    }
    
    # Test rapide des APIs
    test_results = {}
    
    # Test Deepgram
    try:
        if DEEPGRAM_API_KEY:
            test_deepgram = DeepgramClient(DEEPGRAM_API_KEY)
            test_results["deepgram"] = "‚úÖ Connexion OK"
        else:
            test_results["deepgram"] = "‚ùå Cl√© manquante"
    except:
        test_results["deepgram"] = "‚ö†Ô∏è Erreur de connexion"
    
    # Test OpenAI
    try:
        if OPENAI_API_KEY:
            test_results["openai"] = "‚úÖ Cl√© valide"
        else:
            test_results["openai"] = "‚ùå Cl√© manquante"
    except:
        test_results["openai"] = "‚ö†Ô∏è Erreur de connexion"
    
    return jsonify({
        "agent": "Neo",
        "company": "AlwayzIA",
        "service": "Agent IA T√©l√©phonique",
        "status": "Test endpoint",
        "configuration": config_status,
        "connectivity_tests": test_results,
        "webhook_url": f"{request.host_url}voice",
        "ready_for_calls": all([TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, OPENAI_API_KEY, DEEPGRAM_API_KEY])
    })

@app.route("/demo", methods=["POST"])
def demo():
    """Endpoint de d√©monstration pour tester Neo sans appel t√©l√©phonique"""
    try:
        data = request.get_json()
        test_message = data.get("message", "Bonjour, je voudrais faire une r√©servation pour ce soir.")
        
        # Test de la cha√Æne compl√®te (sans audio)
        hotel_config = get_default_hotel_config()
        response_text = generate_gpt4_response(test_message, "", hotel_config)
        
        return jsonify({
            "agent": "Neo",
            "company": "AlwayzIA",
            "hotel": hotel_config['nom_hotel'],
            "input": test_message,
            "neo_response": response_text,
            "status": "‚úÖ Test r√©ussi"
        })
        
    except Exception as e:
        return jsonify({
            "agent": "Neo",
            "error": str(e),
            "status": "‚ùå Test √©chou√©"
        })

# Point d'entr√©e principal
if __name__ == "__main__":
    logging.info("üöÄ D√©marrage de Neo - Agent IA T√©l√©phonique AlwayzIA v2.0")
    logging.info("ü§ñ Neo (√âlise) est maintenant en ligne pour l'H√¥tel Beau-Rivage")
    logging.info("üè¢ Soci√©t√©: AlwayzIA")
    logging.info("üìã Prompt: v1.2 (06.06.2025) - Maxime Maadoune Meloni")
    logging.info("üß† GPT-4 pour l'intelligence artificielle")
    logging.info("üé§ Deepgram pour la transcription")
    logging.info("üîä ElevenLabs Flash v2.5 pour la synth√®se vocale")
    logging.info("üìû Twilio pour la t√©l√©phonie")
    logging.info("üì° Neo est pr√™t √† recevoir les appels pour l'H√¥tel Beau-Rivage...")
    
    # Configuration du port pour d√©veloppement local uniquement
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port, debug=False)
